name: Deploy Backend to Cloud Run

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  PROJECT_ID: sahayak-mvp-466309
  SERVICE_NAME: sahayak-backend
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker

    - name: Check backend files
      run: |
        echo "Checking backend directory contents..."
        ls -la backend/
        echo "Checking for Dockerfile..."
        if [ -f backend/Dockerfile ]; then
          echo "Dockerfile found"
          cat backend/Dockerfile
        else
          echo "ERROR: Dockerfile not found!"
        fi
        echo "Checking for requirements..."
        ls -la backend/requirements*.txt || echo "No requirements files found"

    - name: Build Docker image locally first (for debugging)
      run: |
        cd backend
        echo "Building Docker image..."
        docker build -t test-image . || {
          echo "Docker build failed. Showing last 50 lines of output:"
          docker build -t test-image . 2>&1 | tail -50
          exit 1
        }

    - name: Deploy to Cloud Run
      run: |
        cd backend
        
        # Try deployment with detailed logging
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --source . \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300 \
          --max-instances 10 \
          --set-env-vars "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
          --project ${{ env.PROJECT_ID }} \
          --verbosity=debug 2>&1 | tee deploy.log
        
        # Check if deployment failed
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "Deployment failed. Checking logs..."
          
          # Get the latest build ID
          BUILD_ID=$(gcloud builds list --limit=1 --format="value(id)")
          echo "Latest build ID: $BUILD_ID"
          
          # Get build logs
          echo "Build logs:"
          gcloud builds log $BUILD_ID || echo "Could not retrieve build logs"
          
          exit 1
        fi

    - name: Test deployment
      if: success()
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --format 'value(status.url)' \
          --project ${{ env.PROJECT_ID }})
        
        echo "Service URL: $SERVICE_URL"
        
        # Test health endpoint
        curl -f "$SERVICE_URL/health" || echo "Health check failed"

    - name: Upload deployment logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: deployment-logs
        path: |
          backend/deploy.log
          backend/Dockerfile
          backend/requirements*.txt